{"version":3,"sources":["App.js","index.js"],"names":["TODO_KEY","updateLocalStorage","todos","localStorage","setItem","JSON","stringify","App","previous_todos","value","getItem","parse","getLocalStorage","useState","setTodos","inputValue","setInputValue","handleAdd","new_todos","className","type","placeholder","onKeyPress","e","code","onChange","target","onClick","map","item","index","splice","handleDelete","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAGMA,EAAW,QAOXC,EAAqB,SAACC,GAC1B,OAAOC,aAAaC,QAAQJ,EAAUK,KAAKC,UAAUJ,KAmExCK,MAhEf,WACE,IAAMC,EAVgB,WACtB,IAAMC,EAAQN,aAAaO,QAAQV,GACnC,OAAOK,KAAKM,MAAMF,GAQKG,GACvB,EAA0BC,mBAASL,GAAkC,IAArE,mBAAON,EAAP,KAAcY,EAAd,KACA,EAAoCD,mBAAS,IAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KAEMC,EAAY,WAEhB,GAAIF,EAAY,CAEd,IAAMG,EAAS,sBAAOhB,GAAP,CAAca,IAE7BD,EAASI,GAETjB,EAAmBiB,GAEnBF,EAAc,MAmBlB,OACE,qBAAKG,UAAU,MAAf,SACE,gCACE,uBACEA,UAAU,cACVC,KAAK,OACLC,YAAY,uBACZC,WAtBU,SAACC,GACF,UAAXA,EAAEC,MACJP,KAqBIQ,SAAU,SAACF,GAAD,OAAOP,EAAcO,EAAEG,OAAOjB,QACxCA,MAAOM,IAET,wBAAQY,QAASV,EAAjB,iBAIA,6BACGf,EAAM0B,KAAI,SAACC,EAAMC,GAChB,OACE,sBAAgBX,UAAU,MAA1B,UACE,6BAAKU,IACL,wBAAQF,QAAS,kBA7BV,SAACG,GAEpB,IAAMZ,EAAS,YAAOhB,GAEtBgB,EAAUa,OAAOD,EAAO,GACxBhB,EAASI,GACTjB,EAAmBiB,GAuBgBc,CAAaF,IAApC,sBAFQD,cC7DxBI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.70ed0b21.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\n\nconst TODO_KEY = \"todos\";\n\nconst getLocalStorage = () => {\n  const value = localStorage.getItem(TODO_KEY);\n  return JSON.parse(value);\n};\n\nconst updateLocalStorage = (todos) => {\n  return localStorage.setItem(TODO_KEY, JSON.stringify(todos));\n};\n\nfunction App() {\n  const previous_todos = getLocalStorage();\n  const [todos, setTodos] = useState(previous_todos ? previous_todos : []);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleAdd = () => {\n    // add only if input is not empty\n    if (inputValue) {\n      // create a new copy of current todos\n      const new_todos = [...todos, inputValue];\n      // update todos state\n      setTodos(new_todos);\n      // update localStorage with new todos\n      updateLocalStorage(new_todos);\n      // clears input field\n      setInputValue(\"\");\n    }\n  };\n\n  const handleKey = (e) => {\n    if (e.code === 'Enter') {\n      handleAdd();\n    }\n  };\n\n  const handleDelete = (index) => {\n    // create a new copy\n    const new_todos = [...todos];\n    // remove item at index\n    new_todos.splice(index, 1);\n    setTodos(new_todos);\n    updateLocalStorage(new_todos);\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <input\n          className=\"input-field\"\n          type=\"text\"\n          placeholder=\"Enter your todo item\"\n          onKeyPress={handleKey}\n          onChange={(e) => setInputValue(e.target.value)}\n          value={inputValue}\n        ></input>\n        <button onClick={handleAdd}>\n          Add\n        </button>\n\n        <ul>\n          {todos.map((item, index) => {\n            return (\n              <div key={item} className=\"row\">\n                <li>{item}</li>\n                <button onClick={() => handleDelete(index)}>Delete</button>\n              </div>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}